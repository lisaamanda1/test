<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd">
    
    <!-- 扫描service包下所有使用注解的类型 -->
    <context:component-scan base-package="com.hx" />
    <!--
    <bean id="greetingProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<property name="interfaces" value="com.hx.test.Greeting"></property>
    	<property name="target" ref="greetingImpl"></property>
    	<property name="interceptorNames" value="greetingAround"></property>
    </bean>
    -->
    <!--
    <bean id="greetingProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<property name="interfaces" value="com.hx.test.Love"></property>
    	<property name="target" ref="greetingImpl"></property>
    	<property name="interceptorNames" value="loveImpl"></property>
    	<property name="proxyTargetClass" value="true"></property>
    </bean>
    -->
    <!--
    <bean id="greetingAdvisor" class="org.springframework.aop.support.RegexpMethodPointcutAdvisor">
    	<property name="advice" ref="greetingAround"></property>
    	<property name="pattern" value="com.hx.test.GreetingImpl.good.*"></property>
    </bean>
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator">
    	<property name="optimize" value="true"></property>
    </bean>
    -->
    <!--
    <bean id="greetingProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
    	<property name="interfaces" value="com.hx.test.Love"></property>
    	<property name="target" ref="greetingImpl"></property>
    	<property name="interceptorNames" value="greetingAdvisor"></property>
    	<property name="proxyTargetClass" value="true"></property>
    </bean>
    -->
    <aop:aspectj-autoproxy proxy-target-class="true" />
    
    
    <!-- 配置事务管理器 -->
    <bean id="transactionManager"
        class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
    </bean>

    <!-- 配置基于注解的声明式事务 -->
    <!--	先不要
    <tx:annotation-driven transaction-manager="transactionManager" />
    -->
    
    <!-- 1.配置数据库相关参数properties的属性：${url} -->
    <context:property-placeholder location="classpath:jdbc.properties" />
    
    <!-- 2.数据库连接池 -->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <!-- 配置连接池属性 -->
        <property name="driverClass" value="${driver}" />
        <property name="jdbcUrl" value="${url}" />
        <property name="user" value="${username}" />
        <property name="password" value="${password}" />
        <!-- c3p0连接池的私有属性 -->
        <property name="maxPoolSize" value="30" />
        <property name="minPoolSize" value="10" />
        <!-- 关闭连接后不自动commit -->
        <property name="autoCommitOnClose" value="false" />
        <!-- 获取连接超时时间 -->
        <property name="checkoutTimeout" value="10000" />
        <!-- 当获取连接失败重试次数 -->
        <property name="acquireRetryAttempts" value="2" />
    </bean>
    
    <!-- 3.配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource" />
        
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml -->
        <!--	先不要全局配置
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        -->
        <!-- 扫描bean包 使用别名 -->
        <property name="typeAliasesPackage" value="com.hx.bean" />
        <!-- 扫描sql配置文件:mapper需要的xml文件 -->
        <property name="mapperLocations" value="classpath:mapper/*.xml" />
    </bean>
    
    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.hx.dao" />
    </bean>
    
</beans>